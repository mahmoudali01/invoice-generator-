/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import invoicedesktop.invoice;
import invoicedesktop.invoiceItem;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

 class MyCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv") ;
        }
        @Override
        public String getDescription() {
            
            return "csv files (*.csv)";
        }
    }

public class NewJFrame extends javax.swing.JFrame {
           File   headerFile = new File("/");
            File headerLine = new File("/");
               ArrayList<invoice> allInvoices = new ArrayList<invoice>();
               ArrayList<ArrayList<invoiceItem>> allItems =new ArrayList<ArrayList<invoiceItem>>();
//               ArrayList<ArrayList<invoiceItem>> allItemsTemp =new ArrayList<ArrayList<invoiceItem>>();
//                              ArrayList<invoice> allInvoicesTemp =new ArrayList<invoice>();


               invoice in =new invoice();
               invoiceItem item =new invoiceItem();
               
        DefaultTableModel invoiceModel;
        DefaultTableModel invoiceItemModel;


    /**
     * Creates new form NewJFrame
     */
    
    public NewJFrame() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        addInvoiceDialog = new javax.swing.JDialog();
        addInvoieHeadLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        submitAddingInvoice = new javax.swing.JButton();
        cancelAddInvoice = new javax.swing.JButton();
        setClientName = new javax.swing.JFormattedTextField();
        setInvoiceDate = new com.toedter.calendar.JDateChooser();
        addItemDialog = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        addingItem = new javax.swing.JButton();
        canelAddItem = new javax.swing.JButton();
        setItemName = new javax.swing.JTextField();
        setItemPrice = new javax.swing.JTextField();
        setItemCount = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        invoicesTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        invoiceItemsTable = new javax.swing.JTable();
        invoiceNumberLabel = new javax.swing.JLabel();
        invoiceDateLabel = new javax.swing.JLabel();
        customerNameLabel = new javax.swing.JLabel();
        invoiceTotalLabel = new javax.swing.JLabel();
        customerName = new javax.swing.JTextField();
        createInvoiceButton = new javax.swing.JButton();
        deleteInvoiceButton = new javax.swing.JButton();
        addItemButton = new javax.swing.JButton();
        deleteItemButton = new javax.swing.JButton();
        invoiceNumber = new javax.swing.JTextField();
        invoiceTotalPrice = new javax.swing.JTextField();
        invoiceDate = new javax.swing.JFormattedTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        loadFile = new javax.swing.JMenu();
        load = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();

        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setCurrentDirectory(new java.io.File("D:\\invoiceDesktop\\src"));
        fileChooser.setDialogTitle("enter specified  csv files");
        fileChooser.setFileFilter(new MyCustomFilter()
        );

        addInvoiceDialog.setBounds(new java.awt.Rectangle(0, 0, 300, 300));
        addInvoiceDialog.setSize(new java.awt.Dimension(400, 400));

        addInvoieHeadLabel.setText("enter data for the new invoice");

        jLabel2.setText("enter invoice date");

        jLabel3.setText("enter client name");

        submitAddingInvoice.setText("submit");
        submitAddingInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitAddingInvoiceActionPerformed(evt);
            }
        });

        cancelAddInvoice.setText("cancel");
        cancelAddInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAddInvoiceActionPerformed(evt);
            }
        });

        try {
            setClientName.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("****************************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        setClientName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                setClientNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                setClientNameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                setClientNameKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout addInvoiceDialogLayout = new javax.swing.GroupLayout(addInvoiceDialog.getContentPane());
        addInvoiceDialog.getContentPane().setLayout(addInvoiceDialogLayout);
        addInvoiceDialogLayout.setHorizontalGroup(
            addInvoiceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addInvoiceDialogLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(addInvoiceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addInvoiceDialogLayout.createSequentialGroup()
                        .addComponent(submitAddingInvoice)
                        .addGap(61, 61, 61)
                        .addComponent(cancelAddInvoice))
                    .addGroup(addInvoiceDialogLayout.createSequentialGroup()
                        .addGroup(addInvoiceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addInvoiceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addInvoiceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(setClientName, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                                .addComponent(setInvoiceDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(addInvoieHeadLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        addInvoiceDialogLayout.setVerticalGroup(
            addInvoiceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addInvoiceDialogLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(addInvoiceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addInvoiceDialogLayout.createSequentialGroup()
                        .addComponent(addInvoieHeadLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setInvoiceDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(addInvoiceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(setClientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(addInvoiceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitAddingInvoice)
                    .addComponent(cancelAddInvoice))
                .addContainerGap(131, Short.MAX_VALUE))
        );

        addItemDialog.setSize(new java.awt.Dimension(370, 350));

        jLabel4.setText("enter item name");

        jLabel5.setText("enter item price");

        jLabel6.setText("enter item count");

        addingItem.setText("add item");
        addingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addingItemActionPerformed(evt);
            }
        });

        canelAddItem.setText("cancel");
        canelAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canelAddItemActionPerformed(evt);
            }
        });

        setItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                setItemNameKeyTyped(evt);
            }
        });

        setItemPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setItemPriceActionPerformed(evt);
            }
        });
        setItemPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                setItemPriceKeyTyped(evt);
            }
        });

        setItemCount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                setItemCountKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout addItemDialogLayout = new javax.swing.GroupLayout(addItemDialog.getContentPane());
        addItemDialog.getContentPane().setLayout(addItemDialogLayout);
        addItemDialogLayout.setHorizontalGroup(
            addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemDialogLayout.createSequentialGroup()
                .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addItemDialogLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(55, 55, 55)
                        .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(setItemPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(setItemName)
                            .addComponent(setItemCount)))
                    .addGroup(addItemDialogLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(addingItem)
                        .addGap(40, 40, 40)
                        .addComponent(canelAddItem)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        addItemDialogLayout.setVerticalGroup(
            addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemDialogLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(setItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(setItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(setItemCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(addItemDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addingItem)
                    .addComponent(canelAddItem))
                .addGap(30, 30, 30))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        invoicesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "invoice number", "invoice date", "customer name", "total price"
            }
        ){
            public boolean isCellEditable(int row,int column){
                return false;
            }}
        );
        invoicesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invoicesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(invoicesTable);

        invoiceItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "item name", "item price", "item count", "total price"
            }
        ){
            public boolean isCellEditable(int row , int column){
                return false;
            }
        }
    );
    jScrollPane2.setViewportView(invoiceItemsTable);

    invoiceNumberLabel.setText("invoice number");

    invoiceDateLabel.setText("invoice date (dd/mm/yyyy)");

    customerNameLabel.setText("customer name");

    invoiceTotalLabel.setText("invoice total");

    customerName.setEditable(false);
    customerName.setBackground(new java.awt.Color(204, 204, 204));
    customerName.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            customerNameMouseReleased(evt);
        }
    });
    customerName.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            customerNameActionPerformed(evt);
        }
    });
    customerName.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            customerNameKeyReleased(evt);
        }
    });

    createInvoiceButton.setText("create invoice");
    createInvoiceButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            createInvoiceButtonActionPerformed(evt);
        }
    });

    deleteInvoiceButton.setText("delete invoice");
    deleteInvoiceButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteInvoiceButtonActionPerformed(evt);
        }
    });

    addItemButton.setText("add item");
    addItemButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addItemButtonActionPerformed(evt);
        }
    });

    deleteItemButton.setText("delete item");
    deleteItemButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteItemButtonActionPerformed(evt);
        }
    });
    deleteItemButton.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            deleteItemButtonKeyReleased(evt);
        }
    });

    invoiceNumber.setEditable(false);
    invoiceNumber.setBackground(new java.awt.Color(204, 204, 204));
    invoiceNumber.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            invoiceNumberActionPerformed(evt);
        }
    });

    invoiceTotalPrice.setEditable(false);
    invoiceTotalPrice.setBackground(new java.awt.Color(204, 204, 204));

    invoiceDate.setEditable(false);
    invoiceDate.setBackground(new java.awt.Color(204, 204, 204));
    invoiceDate.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            invoiceDateMouseReleased(evt);
        }
    });
    invoiceDate.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            invoiceDateKeyReleased(evt);
        }
    });

    loadFile.setText("File");
    loadFile.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            loadFileActionPerformed(evt);
        }
    });

    load.setText("load file");
    load.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            loadActionPerformed(evt);
        }
    });
    loadFile.add(load);

    saveFile.setText("save file");
    saveFile.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveFileActionPerformed(evt);
        }
    });
    loadFile.add(saveFile);

    jMenuBar1.add(loadFile);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(invoiceTotalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customerNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(invoiceDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(invoiceNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(invoiceTotalPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(invoiceNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(42, 42, 42)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(invoiceDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGap(63, 63, 63))))
        .addGroup(layout.createSequentialGroup()
            .addGap(38, 38, 38)
            .addComponent(createInvoiceButton)
            .addGap(71, 71, 71)
            .addComponent(deleteInvoiceButton)
            .addGap(129, 129, 129)
            .addComponent(addItemButton)
            .addGap(83, 83, 83)
            .addComponent(deleteItemButton)
            .addGap(0, 0, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(invoiceNumberLabel)
                        .addComponent(invoiceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(invoiceDateLabel)
                        .addComponent(invoiceDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(customerNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(customerName))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(invoiceTotalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(invoiceTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(createInvoiceButton)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteInvoiceButton)
                    .addComponent(addItemButton)
                    .addComponent(deleteItemButton)))
            .addContainerGap(93, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents
   private void showInvoices(String header ,String line){
       try{
        invoiceModel = (DefaultTableModel) invoicesTable.getModel();
                         in.setInvoiceHeader(header);
                        in.setInvoiceLine(line);
                        allInvoices =in.returnAllInvoices();
                        for(invoice x: allInvoices){
                        allItems.add(x.getInvoiceItems());
                        }
                       
               Object []rowData =new Object[4];
                for (int i = 0; i <= allInvoices.size(); i++)
             {
          //                 Date date = null;
           //            try {  
          //                 date=new SimpleDateFormat("dd/MM/yyyy").parse(allInvoices.get(i).getDate());
         //            } catch (ParseException ex) {
          //                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
          //            }

                rowData[0] = String.valueOf(allInvoices.get(i).getInvoiceNO());
                 rowData[1] = String.valueOf(allInvoices.get(i).getDate());
                  rowData[2] = String.valueOf(allInvoices.get(i).getClientName());
                rowData[3] = String.valueOf(allInvoices.get(i).getItemsTotalPrice());
              invoiceModel.addRow(rowData);
              }}catch(Exception e){
              System.out.println("some invoices has no items yet");
              }

    }
  
    void selectedInvoiceItems(int index){
       
        invoiceItemModel = (DefaultTableModel) invoiceItemsTable.getModel();
       invoiceItemModel.setRowCount(0);
      try{
            Object []rowData =new Object[4];
                for (int i = 0; i <= allItems.get(index).size(); i++)
               {
                   rowData[0] = String.valueOf(allItems.get(index).get(i).getItemName());
                   rowData[1] = String.valueOf(allItems.get(index).get(i).getItemPrice());
                   rowData[2] = String.valueOf(allItems.get(index).get(i).getItemCount());
                   rowData[3] = String.valueOf(allItems.get(index).get(i).calTotalItemPrice());
              invoiceItemModel.addRow(rowData);
        }}catch(Exception e){
        System.out.println("inoice has no added items yet");
        }

   }
    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        // TODO add your handling code here:
        
    JOptionPane.showMessageDialog(null, "select the  invoice header file", "Alert", JOptionPane.QUESTION_MESSAGE);        

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
                            headerFile = fileChooser.getSelectedFile();

            if(headerFile.getAbsolutePath().contains("InvoiceHeader")){
                
         JOptionPane.showMessageDialog(null, "select the  invoice items file", "Alert", JOptionPane.QUESTION_MESSAGE);        

              int returnVa =  fileChooser.showOpenDialog(this);
              if (returnVa == JFileChooser.APPROVE_OPTION) {
              headerLine = fileChooser.getSelectedFile();

            if(headerLine.getAbsolutePath().contains("InvoiceLine")){
                      showInvoices(headerFile.getAbsolutePath(),headerLine.getAbsolutePath());
                       
                     }
            else{
                        JOptionPane.showMessageDialog(null, "must  select inoice line file", "Alert", JOptionPane.ERROR_MESSAGE);        

            }
              }
            }
     
               
      else{
             JOptionPane.showMessageDialog(null, "must select the invoice header file", "Alert", JOptionPane.ERROR_MESSAGE);        

       }
    }
        else {
             JOptionPane.showMessageDialog(null, "no file was chosen", "Alert", JOptionPane.QUESTION_MESSAGE);        
    }
        
    }//GEN-LAST:event_loadActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
                     // TODO add your handling code here:
                     
                     if(allInvoices.isEmpty()){                               
                   JOptionPane.showMessageDialog(null, "no invoices to save", "Alert", JOptionPane.QUESTION_MESSAGE);        

                     }
                     else{
     item.setInvoice(in);
     in.saveInvoiceToFile(allInvoices);
     ArrayList<invoiceItem> items = new ArrayList<invoiceItem>();
     for( ArrayList<invoiceItem> itemAsAL:allItems){
         for(invoiceItem x :itemAsAL){
         items.add(x);
         }
     }
     item.saveItemsToFile(items);
                        JOptionPane.showMessageDialog(null, "saved to file successfully", "Alert", JOptionPane.INFORMATION_MESSAGE);        

                     }
    }//GEN-LAST:event_saveFileActionPerformed

    private void loadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileActionPerformed

    }//GEN-LAST:event_loadFileActionPerformed

    private void invoicesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoicesTableMouseClicked
        // TODO add your handling code here:
             invoiceDate.setEditable(true);

             invoiceDate.setBackground(Color.WHITE);
             customerName.setEditable(true);
             customerName.setBackground(Color.WHITE);

              
        int index = invoicesTable.getSelectedRow();
         TableModel model = invoicesTable.getModel();
         String inNum = model.getValueAt(index, 0).toString();
          //SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");

        String date = model.getValueAt(index, 1).toString();
//         // sdf.format(date);
//          Date date = null;
//               try {
//                   date = new SimpleDateFormat("dd-mm-yyyy").parse(dd);
//               } catch (ParseException ex) {
//                   Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
//               }
       // Date date = new SimpleDateFormat("dd-MM-yyyy").parse((String)model.getValueAt(index, 1).toString());


         String clientName= model.getValueAt(index, 2).toString();
         String total =model.getValueAt(index, 3).toString();
         invoiceNumber.setText(inNum);
         invoiceDate.setText(date);
         customerName.setText(clientName);
         invoiceTotalPrice.setText(total);
         
         selectedInvoiceItems(index);
         
        
        
    }//GEN-LAST:event_invoicesTableMouseClicked

    private void invoiceNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_invoiceNumberActionPerformed

    private void createInvoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createInvoiceButtonActionPerformed
          if(!headerFile.isFile()||!headerLine.isFile()){
           JOptionPane.showMessageDialog(null, "<please upload files first>", "Alert", JOptionPane.QUESTION_MESSAGE);        

          }     
         else if(!headerFile.isFile()&&!headerLine.isFile()){
           JOptionPane.showMessageDialog(null, "<please upload files first>", "Alert", JOptionPane.QUESTION_MESSAGE);        

          }     
         
        else{ addInvoiceDialog.setVisible(true);}


    }//GEN-LAST:event_createInvoiceButtonActionPerformed
void creatingInvoice(String date,String clientName){
       invoiceModel = (DefaultTableModel) invoicesTable.getModel();
 

       if(  date.equals("") || clientName.equals("")){
         JOptionPane.showMessageDialog(null, "you must enter values for date and name", "Alert", JOptionPane.QUESTION_MESSAGE);  
           setInvoiceDate.setCalendar(null);
                 setClientName.setText("");
       }else if(date.equals("") && clientName.equals("")){
         JOptionPane.showMessageDialog(null, "you must enter values for date and name", "Alert", JOptionPane.QUESTION_MESSAGE);   
           setInvoiceDate.setCalendar(null);
                 setClientName.setText("");
          }
       else if(!date.equals("") &&!clientName.equals("")){
           ArrayList<invoiceItem> items = new ArrayList<invoiceItem>();
           int size  =allInvoices.size();
           size++;
           invoice newIn =new invoice(size,date,clientName);
           newIn.setInvoiceItems(items);        
           allInvoices.add(newIn);
           allItems.add(items);

                 Object []rowData =new Object[4];

                 rowData[0] = String.valueOf(newIn.getInvoiceNO());
                 rowData[1] = String.valueOf(newIn.getDate());
                 rowData[2] = String.valueOf(newIn.getClientName());
                 rowData[3] = String.valueOf(newIn.getItemsTotalPrice());
                 invoiceModel.addRow(rowData);
                addInvoiceDialog.setVisible(false);

                 setInvoiceDate.setCalendar(null);
                 setClientName.setText("");
                 

    }
}
    private void submitAddingInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitAddingInvoiceActionPerformed
        // TODO add your handling code here:
         String clientName,date;
          SimpleDateFormat sdf =  new SimpleDateFormat("d/M/yyyy");
          if(setInvoiceDate.getDate() == null){
              date ="";
           }
              
        else{
           date = sdf.format(setInvoiceDate.getDate());
          // System.out.println(date);
         }
       
        //    date = setInvoiceDate.getDate();

        clientName =setClientName.getText();
               
        creatingInvoice(date,clientName);
               

    }//GEN-LAST:event_submitAddingInvoiceActionPerformed
void addItemToInvoice(String itemName ,String itemPrice,String itemCount){
        invoiceItemModel = (DefaultTableModel) invoiceItemsTable.getModel();
        invoiceModel = (DefaultTableModel) invoicesTable.getModel();

       // int index = invoicesTable.getSelectedRow();

       if(  itemName.equals("") || itemPrice.equals("")||itemCount.equals("")){
         JOptionPane.showMessageDialog(null, "you must enter values for date and name", "Alert", JOptionPane.QUESTION_MESSAGE);        
       }else if(  itemName.equals("") && itemPrice.equals("")&&itemCount.equals("")){
         JOptionPane.showMessageDialog(null, "you must enter values for date and name", "Alert", JOptionPane.QUESTION_MESSAGE);        
          }
       else if(!itemName.equals("") &&!itemPrice.equals("")&&!itemCount.equals("")){
                   int index = invoicesTable.getSelectedRow();
                   
                  try{ int count = Integer.parseInt(itemCount);
                   double price = Double.parseDouble(itemPrice);
                                 invoiceItem it =new invoiceItem(itemName,price,count,allInvoices.get(index));
                                   allItems.get(index).add(it);

                 Object []rowData =new Object[4];

                 rowData[0] = String.valueOf(it.getItemName());
                 rowData[1] = String.valueOf(it.getItemPrice());
                 rowData[2] = String.valueOf(it.getItemCount());
                 rowData[3] = String.valueOf(it.calTotalItemPrice());
                 invoiceItemModel.addRow(rowData);
                  String pr = String.valueOf(allInvoices.get(index).getItemsTotalPrice());
                 invoiceTotalPrice.setText(pr);
                 invoiceModel.setValueAt(pr,index,3);
                addItemDialog.setVisible(false);
                 setItemName.setText("");
                 setItemCount.setText("");
                 setItemPrice.setText("");

                  }catch(Exception e){
                                JOptionPane.showMessageDialog(null, "enter the right values for price and count", "Alert", JOptionPane.ERROR_MESSAGE);        

                   }
                      
                 
                

            
    }

}
   

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        // TODO add your handling code here:
        if(invoicesTable.getSelectionModel().isSelectionEmpty()) {
         JOptionPane.showMessageDialog(null, "must select invoice first", "Alert", JOptionPane.QUESTION_MESSAGE);        
       }
        else
            addItemDialog.setVisible(true);
         

    }//GEN-LAST:event_addItemButtonActionPerformed

    private void addingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addingItemActionPerformed
        // TODO add your handling code here:
         String itemName ,itemCount,itemPrice;
        itemName =setItemName.getText();
        itemCount =setItemCount.getText();
        itemPrice =setItemPrice.getText();

               
                addItemToInvoice(itemName,itemPrice,itemCount);
                

    }//GEN-LAST:event_addingItemActionPerformed

    private void deleteInvoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteInvoiceButtonActionPerformed
        // TODO add your handling code here:
                invoiceModel = (DefaultTableModel) invoicesTable.getModel();
                invoiceItemModel = (DefaultTableModel) invoiceItemsTable.getModel();


         if(invoicesTable.getSelectionModel().isSelectionEmpty()) {
         JOptionPane.showMessageDialog(null, "must select invoice first", "Alert", JOptionPane.QUESTION_MESSAGE);        
       }
         else{
                                         int index = invoicesTable.getSelectedRow();

                            invoiceModel.removeRow(index);
                            allInvoices.remove(index);
                            allItems.remove(index);
                            invoiceItemModel.setRowCount(0);
                            invoiceNumber.setText("");
                            invoiceDate.setText("");
                            customerName.setText("");
                            invoiceTotalPrice.setText("");

                            

              }
    }//GEN-LAST:event_deleteInvoiceButtonActionPerformed

    private void deleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemButtonActionPerformed
        // TODO add your handling code here:
             invoiceItemModel = (DefaultTableModel) invoiceItemsTable.getModel();
             invoiceModel = (DefaultTableModel) invoicesTable.getModel();


         if(invoiceItemsTable.getSelectionModel().isSelectionEmpty()) {
         JOptionPane.showMessageDialog(null, "must select invoice first", "Alert", JOptionPane.QUESTION_MESSAGE);        
       }
         else{
                                         int indexx = invoicesTable.getSelectedRow();

                                         int index = invoiceItemsTable.getSelectedRow();

                            invoiceItemModel.removeRow(index);
                            allItems.get(indexx).remove(index);
                            String pr = String.valueOf(allInvoices.get(indexx).getItemsTotalPrice());
                            invoiceTotalPrice.setText(pr);
                            invoiceModel.setValueAt(pr,indexx,3);

              }
        
    }//GEN-LAST:event_deleteItemButtonActionPerformed

    private void canelAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canelAddItemActionPerformed
        // TODO add your handling code here:
        addItemDialog.setVisible(false);
        setItemName.setText("");
        setItemPrice.setText("");
        setItemCount.setText("");

        
    }//GEN-LAST:event_canelAddItemActionPerformed

    private void cancelAddInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAddInvoiceActionPerformed
        // TODO add your handling code here:
                addInvoiceDialog.setVisible(false);
                        setClientName.setText("");
                        setInvoiceDate.setDate(null);

                
    }//GEN-LAST:event_cancelAddInvoiceActionPerformed

    private void setClientNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setClientNameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_setClientNameKeyPressed

    private void setClientNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setClientNameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_setClientNameKeyReleased

    private void setClientNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setClientNameKeyTyped
        // TODO add your handling code here:
         setClientName.addKeyListener(new KeyAdapter() {
         public void keyTyped(KeyEvent e) {
             char c = e.getKeyChar();
             if(!(Character.isAlphabetic(c) || (c==KeyEvent.VK_BACK_SPACE) || c==KeyEvent.VK_DELETE )) {
                 e.consume();  // ignore the event if it's not an alphabet
             }
         }
      });
      
    }//GEN-LAST:event_setClientNameKeyTyped

    private void setItemPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setItemPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setItemPriceActionPerformed

    private void setItemNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setItemNameKeyTyped
        // TODO add your handling code here:
         setItemName.addKeyListener(new KeyAdapter() {
         public void keyTyped(KeyEvent e) {
             char c = e.getKeyChar();
             if(!(Character.isAlphabetic(c) || (c==KeyEvent.VK_BACK_SPACE) || c==KeyEvent.VK_DELETE )) {
                 e.consume();  // ignore the event if it's not an alphabet
             }
         }
      });
    }//GEN-LAST:event_setItemNameKeyTyped

    private void setItemCountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setItemCountKeyTyped
        // TODO add your handling code here:
         setItemCount.addKeyListener(new KeyAdapter() {
    public void keyTyped(KeyEvent e) {
      char c = e.getKeyChar();
      if (!((c >= '0') && (c <= '9') ||
         (c == KeyEvent.VK_BACK_SPACE) ||
         (c == KeyEvent.VK_DELETE))) {
        getToolkit().beep();
        e.consume();
      }
    }
  });
    }//GEN-LAST:event_setItemCountKeyTyped

    private void setItemPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setItemPriceKeyTyped
        // TODO add your handling code here:
           setItemPrice.addKeyListener(new KeyAdapter() {
    public void keyTyped(KeyEvent e) {
      char c = e.getKeyChar();
      if (!((c >= '0') && (c <= '9') ||
         (c == KeyEvent.VK_BACK_SPACE) ||
         (c == KeyEvent.VK_DELETE) ||
          c == KeyEvent.VK_DECIMAL ||
          c == KeyEvent.VK_PERIOD)) {
        getToolkit().beep();
        e.consume();
      }
    }
  });
    }//GEN-LAST:event_setItemPriceKeyTyped

    private void deleteItemButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteItemButtonKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteItemButtonKeyReleased

    private void customerNameMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerNameMouseReleased
        // TODO add your handling code here:
         
    }//GEN-LAST:event_customerNameMouseReleased

    private void customerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerNameActionPerformed

    private void invoiceDateMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoiceDateMouseReleased
        // TODO add your handling code here:

          
          

    }//GEN-LAST:event_invoiceDateMouseReleased

    private void invoiceDateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_invoiceDateKeyReleased
        // TODO add your handling code here:
        invoiceModel = (DefaultTableModel) invoicesTable.getModel();
           String date = invoiceDate.getText();


         int index = invoicesTable.getSelectedRow();
           allInvoices.get(index).setClientName(date);
                    //  allInvoices.get(index).setDate(name);
                 invoiceModel.setValueAt(date,index,1);
    
    }//GEN-LAST:event_invoiceDateKeyReleased

    private void customerNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerNameKeyReleased
        // TODO add your handling code here:
          invoiceModel = (DefaultTableModel) invoicesTable.getModel();

           String name = customerName.getText();
        //   String name = customerName.getText();
           int index = invoicesTable.getSelectedRow();
           allInvoices.get(index).setClientName(name);
                    //  allInvoices.get(index).setDate(name);
                                          invoiceModel.setValueAt(name,index,2);


    }//GEN-LAST:event_customerNameKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NewJFrame().setVisible(true);
             //  new NewJFrame().loadFileActionPerformed();
             //loadFileActionPerformed();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addInvoiceDialog;
    private javax.swing.JLabel addInvoieHeadLabel;
    private javax.swing.JButton addItemButton;
    private javax.swing.JDialog addItemDialog;
    private javax.swing.JButton addingItem;
    private javax.swing.JButton cancelAddInvoice;
    private javax.swing.JButton canelAddItem;
    private javax.swing.JButton createInvoiceButton;
    private javax.swing.JTextField customerName;
    private javax.swing.JLabel customerNameLabel;
    private javax.swing.JButton deleteInvoiceButton;
    private javax.swing.JButton deleteItemButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JFormattedTextField invoiceDate;
    private javax.swing.JLabel invoiceDateLabel;
    private javax.swing.JTable invoiceItemsTable;
    private javax.swing.JTextField invoiceNumber;
    private javax.swing.JLabel invoiceNumberLabel;
    private javax.swing.JLabel invoiceTotalLabel;
    private javax.swing.JTextField invoiceTotalPrice;
    private javax.swing.JTable invoicesTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem load;
    private javax.swing.JMenu loadFile;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JFormattedTextField setClientName;
    private com.toedter.calendar.JDateChooser setInvoiceDate;
    private javax.swing.JTextField setItemCount;
    private javax.swing.JTextField setItemName;
    private javax.swing.JTextField setItemPrice;
    private javax.swing.JButton submitAddingInvoice;
    // End of variables declaration//GEN-END:variables
}
